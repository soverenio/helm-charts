# HTTPS Proxy URL - This will apply to both Digger and Detection tool Agent
httpsProxy: ""
httpsProxyNoProxy: ""

kafka:
  topics:
    eventsTopicName: events
    heartbeatTopicName: heartbeat
    iplistTopicName: iplist
    controlRequestTopicName: control_request
    controlResponseTopicName: control_response
    logsTopicName: logs
  embedded:
    enabled: true
    deploymentAnnotations: {}
    deploymentLabels: {}
    podAnnotations: {}
    podLabels: {}
    image:
      name: soveren/kafka
      tag: 2.13-3.5.1
      pullPolicy: IfNotPresent
    env:
    - name: KAFKA_HEAP_OPTS
      value: -Xmx512m -Xms512m
    priorityClassName: ""
    resources:
      requests:
        cpu: "100m"
        memory: "650Mi"
        ephemeral-storage: 5Gi
      limits:
        cpu: "400m"
        memory: "1024Mi"
        ephemeral-storage: 10Gi
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000
    nodeSelector: {}
    affinity: {}
    tolerations: []
    persistentVolume:
      # -- Create/use Persistent Volume Claim for server component. Empty dir if false
      enabled: false
      # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      annotations: {}
      # -- StorageClass to use for persistent volume.
      storageClass: ""
      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}
      # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
      size: 10Gi
    service:
      annotations: {}
      labels: {}
      port: 9092
    metrics:
      enabled: true
      port: 9308
      image:
        name: soveren/kafka-exporter
        tag: v1.7.0
      resources:
        requests:
          cpu: "100m"
          memory: "650Mi"
          ephemeral-storage: 5Gi
        limits:
          cpu: "400m"
          memory: "1024Mi"
          ephemeral-storage: 10Gi
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
  external:
    # kafka.external.brokers used only if kafka.embedded.enabled=false
    brokers: []

digger:
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  token: ""
  clusterName: ""
  image:
    name: soveren/digger
    tag: v0.28.0
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1500m"
      memory: "768Mi"
      ephemeral-storage: 100Mi
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  service:
    annotations: {}
    labels: {}
    port: 9000
  cfg:
    log:
      level: error
    kubernetesfilterlist:
      # filter by kubernetes namespace definitions. Empty list allows everything. You can set it like this:
      # - namespace: default
      #   action: allow
      # - namespace: kube-system
      #   action: deny
      definitions:
        - namespace: "*"
          action: allow
    resolver:
      excludeLabels: []
    sampler:
      activeClusteringUpdaterEnabled: true
    detectioncorrector:
      # Enable or disable detection corrector
      enabled: false # bool
      # URL of detection corrector service
      url: http://localhost:8080/validate # string
      # Authentication for detection corrector service. If empty, authentication is disabled.
      token:  # string
      # List of data types keywords to be sent to service. For example: EMAIL, PHONE.
      types: # <array> of string

detectionTool:
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  image:
    name: soveren/detection-tool
    tag: v2.7.1
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "200m"
      memory: "768Mi"
    limits:
      cpu: "2200m"
      memory: "2048Mi"
      ephemeral-storage: 200Mi
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  metricsPort: 9100
  service:
    annotations: {}
    labels: {}
    port: 8000
  cfg:
    log:
      level: error

interceptor:
  daemonSetAnnotations: {}
  daemonSetLabels: {}
  podAnnotations: {}
  podLabels: {}
  image:
    name: soveren/interceptor
    tag: v0.28.0
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "1000m"
      memory: "2048Mi"
      ephemeral-storage: 100Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []
  securityContext:
    privileged: true
  metricsPort: 9090
  service:
    annotations: {}
    labels: {}
    port: 9090
  cfg:
    log:
      level: error
    memory:
      limit: 1610612736
      softLimitPercent: 125
    conntracker:
      linkerdPort: 4140
      envoyPort: 15001

rpcapd:
  image:
    name: soveren/rpcapd
    tag: v0.1.2
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"
      ephemeral-storage: 100Mi
  securityContext:
    privileged: true
  cfg:
    port: 28400


prometheusAgent:
  enabled: true
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  additionalMetrics:
    enabled: false
    name: client
    url: http://prometheus.prometheus:9100/metrics/send
  image:
    name: prom/prometheus
    tag: v2.37.0
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources: 
    requests:
      memory: "192Mi"
      cpu: "75m"
    limits:
      memory: "400Mi"
      cpu: "75m"
      ephemeral-storage: 100Mi
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    allowPrivilegeEscalation: false
  nodeSelector: {}
  affinity: {}
  tolerations: []
  cfg:
    log:
      level: error

networkPolicy:
  # -- Specifies whether Network Policies should be created
  enabled: false
  # -- Specify when the httpsProxy is enabled
  proxyIp: ""
  k8sApi:
    # -- Specify the k8s API endpoint port
    port: 443
