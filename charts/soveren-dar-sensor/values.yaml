# HTTPS Proxy URL
httpsProxy: ""
httpsProxyNoProxy: ""

crawler:
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  token: ""
  awsAccessKeyId: ""
  awsSecretAccessKey: ""
  image:
    name: soveren/crawler
    tag: v0.3.0
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1500m"
      memory: "768Mi"
      ephemeral-storage: 100Mi
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  service:
    annotations: {}
    labels: {}
    port: 9000
  cfg:
    log:
      level: error

prometheusAgent:
  enabled: true
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  additionalMetrics:
    enabled: false
    name: client
    url: http://prometheus.prometheus:9100/metrics/send
  image:
    name: prom/prometheus
    tag: v2.37.0
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources: 
    requests:
      memory: "192Mi"
      cpu: "75m"
    limits:
      memory: "400Mi"
      cpu: "75m"
      ephemeral-storage: 100Mi
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    allowPrivilegeEscalation: false
  nodeSelector: {}
  affinity: {}
  tolerations: []
  cfg:
    log:
      level: error

detectionTool:
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  image:
    name: soveren/detection-tool
    tag: v2.8.3
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "200m"
      memory: "768Mi"
    limits:
      cpu: "2200m"
      memory: "2048Mi"
      ephemeral-storage: 200Mi
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  metricsPort: 9100
  service:
    annotations: {}
    labels: {}
    port: 8000
  cfg:
    log:
      kafkaEnabled: true
      level: error

kafka:
  topics:
#    controlRequestTopicName: control_request
    logsTopicName: logs
  embedded:
    enabled: true
    deploymentAnnotations: {}
    deploymentLabels: {}
    podAnnotations: {}
    podLabels: {}
    image:
      name: soveren/kafka
      tag: 2.13-3.5.1
      pullPolicy: IfNotPresent
    env:
      - name: KAFKA_HEAP_OPTS
        value: -Xmx512m -Xms512m
    priorityClassName: ""
    resources:
      requests:
        cpu: "100m"
        memory: "650Mi"
        ephemeral-storage: 5Gi
      limits:
        cpu: "400m"
        memory: "1024Mi"
        ephemeral-storage: 10Gi
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000
    nodeSelector: {}
    affinity: {}
    tolerations: []
    persistentVolume:
      # -- Create/use Persistent Volume Claim for server component. Empty dir if false
      enabled: false
      # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      annotations: {}
      # -- StorageClass to use for persistent volume.
      storageClass: ""
      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}
      # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
      size: 10Gi
    service:
      annotations: {}
      labels: {}
      port: 9092
    metrics:
      enabled: true
      port: 9308
      image:
        name: soveren/kafka-exporter
        tag: v1.7.0
      resources:
        requests:
          cpu: "100m"
          memory: "650Mi"
          ephemeral-storage: 5Gi
        limits:
          cpu: "400m"
          memory: "1024Mi"
          ephemeral-storage: 10Gi
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
  external:
    # kafka.external.brokers used only if kafka.embedded.enabled=false
    brokers: []

networkPolicy:
  # -- Specifies whether Network Policies should be created
  enabled: false
  # -- Specify when the httpsProxy is enabled
  proxyIp: ""
