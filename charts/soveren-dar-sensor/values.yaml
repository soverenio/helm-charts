# HTTPS Proxy URL
httpsProxy: ""
httpsProxyNoProxy: "{{ .Release.Name }}-crawler,{{ .Release.Name }}-detection-tool,{{ .Release.Name }}-crawler:{{ .Values.crawler.service.grpcPort }},{{ .Release.Name }}-detection-tool:{{ .Values.detectionTool.service.port }}"
useExternalSecrets: false

crawler:
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  token: ""
  image:
    name: soveren/crawler
    tag: v0.15.1
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits:
      cpu: "1500m"
      memory: "768Mi"
      ephemeral-storage: 100Mi
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  imagePullSecrets: []
  service:
    annotations: {}
    labels: {}
    port: 9000
    grpcPort: 10350
  cfg:
    log:
      level: error
    s3:
      enabled: false
      # S3 storage URL, including schema. Leave empty for AWS
      url: ""
      # S3 security token service URL, including schema. Leave empty for AWS
      # For MinIO, leave it blank or set equal to url (see above)
      stsurl: ""
      # S3 storage type. Acceptable values: aws, yandexcloud, minio
      #
      # WARNING!
      # A separate DAR sensor must be deployed for each S3 implementation,
      # such as AWS or MinIO.
      #
      type: "aws"
      # Access key ID
      accessKeyId: ""
      # Secret access key
      secretAccessKey: ""
      # Interval between checking if the bucket info is updated
      checkinterval: "12h"
      # Max number of attempts for retrying requests to the storage
      retrymaxattempts: 5
      # Max delay before the next retry request to the storage
      retrymaxbackoffdelay: "20s"
      # Folder ID. Relevant only for Yandex Cloud
      # If left blank, there will be no links to the cloud console available in the UI
      folderid: ""
      # Fully Qualified Domain Name (FQDN) self-hosted s3 service console URL (including schema).
      # If empty, links to self-hosted console won't be available
      consoleurl: ""
      # Fully Qualified Domain Name (FQDN) for self-hosted s3 service domain (including schema).
      # If empty, connections from assets to self-hosted s3 won't be found
      bucketsdomain: ""
      # Set false if AWS is used, otherwise true
      # If true, get owner info from the buckets list;
      # if false, use separate API to get info about the current AWS user
      getbucketownerfromlist: false
      s3role:
        # Role to assume when accessing the storage
        enabled: false
        # The Amazon Resource Name (ARN) of the role to assume.
        rolearn: ""
        # An identifier for the assumed role session.
        rolesessionname: SoverenCrawlerSession
        # The duration of the role session
        # Min: 15 minutes
        # Max: max session duration set for the role in the IAM.
        # If you specify a value higher than that, the operation fails
        duration: 15m0s
        # Access policy
        policy: ""
      # Yandex Cloud parameters needed for correctly inferring
      # the public/non-public status of buckets
      yandexcloud:
        # The private key obtained when creating authorized keys
        # for the provided service account
        # Example:
        # privatekey: |-
        #   PLEASE DO NOT REMOVE THIS LINE!
        #   -----BEGIN PRIVATE KEY-----
        #   ...
        #   -----END PRIVATE KEY-----
        privatekey: ""
        # ID of the public key obtained when creating authorized keys
        # for the provided service account
        publickeyid: ""
        # Service account ID that the IAM token will be requested for.
        # This service account must have the iam.serviceAccounts.tokenCreator role
        serviceaccountid: ""
      clienttlsconfig:
        # Skip tls certificate verification for self-hosted s3 service
        insecureskipverify: false
    kafka:
      enabled: false
      elements:
        - instancename: "<YOUR KAFKA INSTANCE NAME>"
          # Kafka broker network addresses, i.e. HOST[:PORT] or IP[:PORT]
          # If your Kafka is deployed in K8s where you're deploying this sensor,
          # then SERVICE_NAME.NAMESPACE[:PORT] should also work
          brokers: ["<YOUR KAFKA INSTANCE BROKER 1>", "<YOUR KAFKA INSTANCE BROKER 2>", ..., "<YOUR KAFKA INSTANCE BROKER N>"]
          tls: false
          tlsconfig:
            # Skip server certificate verification
            insecureskipverify: true
          sasl: false
          user: "<YOUR SASL USER>"
          password: "<YOUR SASL PASSWORD>"
    database:
      checkinterval: "24h"
      postgres:
        enabled: false
        elements:
          - name: "Your PostgreSQL instance name"
            # PostgreSQL connection string, e.g.:
            # postgresql://[user[:password]@][netloc][:port][/dbname]
            # If /dbname is specified then only this database will be scanned by the sensor
            connectionString: ""
            # Default database name to use if not specified in the connection string.
            # If this value is empty, the dbname from the connection string will be used.
            defaultDBName: ""
      mssql:
        enabled: false
        elements:
          - name: "Your SQL Server instance name"
            # SQL Server connection string, e.g.:
            # sqlserver://[user[:password]@][netloc][:port][/dbname]
            # If /dbname is specified then only this database will be scanned by the sensor
            connectionString: ""
            # Default database name to use if not specified in the connection string.
            # If this value is empty, the dbname from the connection string will be used.
            defaultDBName: ""
      mysql:
        enabled: false
        elements:
          - name: "Your MySQL instance name"
            # MySQL connection string, e.g.:
            # mysql://[user[:password]@][netloc][:port][/dbname]
            # If /dbname is specified then only this database will be scanned by the sensor
            connectionString: ""
            # Default database name to use if not specified in the connection string.
            # If this value is empty, the dbname from the connection string will be used.
            defaultDBName: ""
    nosqldatabase:
      checkinterval: "24h"
      mongodb:
        enabled: false
        elements:
          - name: "Your MongoDB instance name"
            # MongoDB connection string, e.g.:
            # mongodb://[user[:password]@][netloc][:port][/dbname]
            # If /dbname is specified then only this database will be scanned by the sensor
            connectionString: ""
    discoveryservices:
      consul:
        enabled: false
        # Consul HTTP address
        address: ""
        # Interval between checking services in Consul
        checkinterval: "24h"
        # Settings for filtering Kafka services
        kafka:
            # Specifies the filter expression to query.
            # Example:
            # filter: "ServicePort==9092"
            # Must be filled in or the section will be skipped.
          - filter: ""
            # Specifies the datacenter to query.
            # If empty, defaults to the datacenter of the agent being queried.
            datacenter: ""
            # nodemeta is deprecated by Consul.
            # Use filter with NodeMeta selector instead.
            # This parameter is maintained for compatibility
            # with older versions of Consul.
            # Specifies the desired node metadata key:value pairs.
            nodemeta: []
        # Settings for filtering PostgreSQL services
        postgres:
            # Specifies the filter expression to query.
            # Example:
            # filter: "ServicePort==5432"
            # Must be filled in or the section will be skipped.
          - filter: ""
            # Specifies the datacenter to query.
            # If empty, defaults to the datacenter of the agent being queried.
            datacenter: ""
            # nodemeta is deprecated by Consul.
            # Use filter with NodeMeta selector instead.
            # This parameter is maintained for compatibility
            # with older versions of Consul.
            # Specifies the desired node metadata key:value pairs.
            nodemeta: []
        # Settings for filtering MySQL services
        mysql:
            # Specifies the filter expression to query.
            # Example:
            # filter: "ServicePort==3306"
            # Must be filled in or the section will be skipped.
          - filter: ""
            # Specifies the datacenter to query.
            # If empty, defaults to the datacenter of the agent being queried.
            datacenter: ""
            # nodemeta is deprecated by Consul.
            # Use filter with NodeMeta selector instead.
            # This parameter is maintained for compatibility
            # with older versions of Consul.
            # Specifies the desired node metadata key:value pairs.
            nodemeta: []
        # Settings for filtering MSSQL services
        mssql:
            # Specifies the filter expression to query.
            # Example:
            # filter: "ServicePort==1433"
            # Must be filled in or the section will be skipped.
          - filter: ""
            # Specifies the datacenter to query.
            # If empty, defaults to the datacenter of the agent being queried.
            datacenter: ""
            # nodemeta is deprecated by Consul.
            # Use filter with NodeMeta selector instead.
            # This parameter is maintained for compatibility
            # with older versions of Consul.
            # Specifies the desired node metadata key:value pairs.
            nodemeta: []


prometheusAgent:
  enabled: true
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  additionalMetrics:
    enabled: false
    name: client
    url: http://prometheus.prometheus:9100/metrics/send
  image:
    name: prom/prometheus
    tag: v2.37.0
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources: 
    requests:
      memory: "192Mi"
      cpu: "75m"
    limits:
      memory: "400Mi"
      cpu: "75m"
      ephemeral-storage: 100Mi
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    allowPrivilegeEscalation: false
  nodeSelector: {}
  affinity: {}
  tolerations: []
  imagePullSecrets: []
  cfg:
    log:
      level: error

detectionTool:
  deploymentAnnotations: {}
  deploymentLabels: {}
  podAnnotations: {}
  podLabels: {}
  image:
    name: soveren/detection-tool-dar
    tag: v2.13.3
    pullPolicy: IfNotPresent
  env: []
  priorityClassName: ""
  resources:
    requests:
      cpu: "200m"
      memory: "2252Mi"
    limits:
      cpu: "2200m"
      memory: "4000Mi"
      ephemeral-storage: 200Mi
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    runAsNonRoot: true
  nodeSelector: {}
  affinity: {}
  tolerations: []
  imagePullSecrets: []
  metricsPort: 9100
  service:
    annotations: {}
    labels: {}
    port: 8000
  cfg:
    log:
      kafkaEnabled: true
      level: error

kafka:
  topics:
#    controlRequestTopicName: control_request
    logsTopicName: logs
  embedded:
    enabled: true
    deploymentAnnotations: {}
    deploymentLabels: {}
    podAnnotations: {}
    podLabels: {}
    image:
      name: soveren/kafka
      tag: 2.13-3.5.1
      pullPolicy: IfNotPresent
    env:
      - name: KAFKA_HEAP_OPTS
        value: -Xmx512m -Xms512m
    priorityClassName: ""
    resources:
      requests:
        cpu: "100m"
        memory: "650Mi"
        ephemeral-storage: 5Gi
      limits:
        cpu: "400m"
        memory: "1024Mi"
        ephemeral-storage: 10Gi
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000
    nodeSelector: {}
    affinity: {}
    tolerations: []
    imagePullSecrets: []
    persistentVolume:
      # -- Create/use Persistent Volume Claim for server component. Empty dir if false
      enabled: false
      # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      annotations: {}
      # -- StorageClass to use for persistent volume.
      storageClass: ""
      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}
      # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
      size: 10Gi
    service:
      annotations: {}
      labels: {}
      port: 9092
    metrics:
      enabled: true
      port: 9308
      image:
        name: soveren/kafka-exporter
        tag: v1.7.0
      resources:
        requests:
          cpu: "100m"
          memory: "650Mi"
          ephemeral-storage: 5Gi
        limits:
          cpu: "400m"
          memory: "1024Mi"
          ephemeral-storage: 10Gi
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
  external:
    # kafka.external.brokers used only if kafka.embedded.enabled=false
    brokers: []

networkPolicy:
  # -- Specifies whether Network Policies should be created
  enabled: false
  # -- Specify IP or IP/MASK when the httpsProxy is enabled
  proxyIp: ""
  # -- Specify IP/MASK, PORT, PROTOCOL for additional IP whitelist egress
  #  crawlerAdditionalEgress:
  #      - name: postgres
  #        host: 192.168.1.1/32
  #        port: 5432
  #        protocol: TCP
  crawlerAdditionalEgress: []
